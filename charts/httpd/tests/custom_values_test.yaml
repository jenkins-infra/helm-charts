suite: Tests with custom values
templates:
  - configmap.yaml
  - deployment.yaml
  - ingress.yaml
  - secret.yaml # Direct dependency of deployment.yaml
  - service.yaml
  - persistentVolume.yaml
  - persistentVolumeClaim.yaml
set:
  image:
    pullPolicy: Never
  repository:
    reuseExistingPersistentVolumeClaim: true
  ingress:
    enabled: true
    hosts:
      - host: chart-example.local
        paths:
        - path: /
          pathType: IfNotPresent
  httpdConf: |
    ServerName example.com
tests:
  - it: Should set the correct service selector labels when a fullNameOverride is specified
    template: service.yaml
    set:
      fullNameOverride: "my-fullNameOverride"
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Service
      - equal:
          path: spec.selector["app.kubernetes.io/name"]
          value: "httpd"
      - equal:
          path: spec.selector["app.kubernetes.io/instance"]
          value: "RELEASE-NAME"
  - it: Should set the correct service selector labels when a nameOverride is specified
    template: service.yaml
    set:
      nameOverride: "my-nameOverride"
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Service
      - equal:
          path: spec.selector["app.kubernetes.io/name"]
          value: "my-nameOverride"
      - equal:
          path: spec.selector["app.kubernetes.io/instance"]
          value: "RELEASE-NAME"
  - it: should define a customized deployment
    template: deployment.yaml
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Deployment
      - equal:
          path: spec.template.spec.containers[*].imagePullPolicy
          value: Never
  - it: should define a volume 'html' if reuseExistingPersistentVolumeClaim is true
    template: deployment.yaml
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Deployment
      - equal:
          path: spec.template.spec.volumes[0].name
          value: conf
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[0].name
          value: conf
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[0].readOnly
          value: true
      # HTML volume uses an existing PVC (specified by values)
      - equal:
          path: spec.template.spec.volumes[1].name
          value: html
      - equal:
          path: spec.template.spec.volumes[1].persistentVolumeClaim.claimName
          value: httpd-binary
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[1].name
          value: html
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[1].readOnly
          value: true
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[1].mountPath
          value: /usr/local/apache2/htdocs
  - it: should define a managed "html" volume if repository.persistentVolumeClaim.enabled is true
    template: deployment.yaml
    set:
      repository:
        persistentVolumeClaim:
          enabled: true
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Deployment
      - equal:
          path: spec.template.spec.volumes[0].name
          value: conf
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[0].name
          value: conf
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[0].readOnly
          value: true
      # HTML volume uses an existing PVC (specified by values)
      - equal:
          path: spec.template.spec.volumes[1].name
          value: html
      - equal:
          path: spec.template.spec.volumes[1].persistentVolumeClaim.claimName
          value: httpd-binary
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[1].name
          value: html
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[1].readOnly
          value: true
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[1].mountPath
          value: /usr/local/apache2/htdocs
  - it: should create ingress with pathType set to the specified custom value by default
    template: ingress.yaml
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Ingress
      - equal:
          path: spec.rules[0].http.paths[0].pathType
          value: "IfNotPresent"
  - it: should create a config map with custom httpd conf
    template: configmap.yaml
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: ConfigMap
      - equal:
          path: data["httpd.conf"]
          value: |
            ServerName example.com
