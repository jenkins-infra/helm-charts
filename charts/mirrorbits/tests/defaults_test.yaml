suite: default tests
templates:
  - deployment.yaml
  - ingresses.yaml
  - secrets.yaml
  - services.yaml
  - pdb.yaml
  - persistentVolumes.yaml
  - persistentVolumeClaims.yaml
tests:
  - it: should not create any ingress by default
    template: ingresses.yaml
    asserts:
      - hasDocuments:
          count: 0
  - it: should define the default "mirrorbits" deployment
    template: deployment.yaml
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Deployment
      - equal:
          path: spec.template.metadata.labels["app.kubernetes.io/name"]
          value: "mirrorbits"
      - equal:
          path: spec.template.metadata.labels["app.kubernetes.io/instance"]
          value: "RELEASE-NAME"
      - equal:
          path: "spec.template.spec.containers[*].imagePullPolicy"
          value: IfNotPresent
      - equal:
          path: spec.replicas
          value: 1
      # Configuration is a read-only mount of a configmap
      - equal:
          path: spec.template.spec.volumes[0].name
          value: mirrorbits-config
      - equal:
          path: spec.template.spec.volumes[0].secret.secretName
          value: RELEASE-NAME-mirrorbits-config # same as the secret's metadata.name below
      - equal:
          path: spec.template.spec.volumes[0].secret.items[0].key
          value: mirrorbits.conf
      - equal:
          path: spec.template.spec.volumes[0].secret.items[0].path
          value: mirrorbits.conf
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[0].name
          value: mirrorbits-config
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[0].mountPath
          value: /etc/mirrorbits
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[0].readOnly
          value: true
      # Data Volume is an emptyDir by default (but readonly)
      - equal:
          path: spec.template.spec.volumes[3].name
          value: data
      - equal:
          path: spec.template.spec.volumes[3].emptyDir
          value: {}
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[2].name
          value: data
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[2].mountPath
          value: /srv/repo
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[2].readOnly
          value: true
      # GeoIP is an emptyDir, with default mountpath
      - equal:
          path: spec.template.spec.volumes[4].name
          value: geoipdata
      - equal:
          path: spec.template.spec.volumes[4].emptyDir
          value: {}
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[1].name
          value: geoipdata
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[1].mountPath
          value: /usr/share/GeoIP
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[1].readOnly
          value: true
      # Tempdir uses a tmpfs volume with a 100Mi limit
      - equal:
          path: spec.template.spec.volumes[1].name
          value: tmpdir
      - equal:
          path: spec.template.spec.volumes[1].emptyDir.medium
          value: Memory
      - equal:
          path: spec.template.spec.volumes[1].emptyDir.sizeLimit
          value: 100Mi
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[3].name
          value: tmpdir
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[3].mountPath
          value: /tmp
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[3].readOnly
          value: false
      # Rundir for PID (tmpfs)
      - equal:
          path: spec.template.spec.volumes[2].name
          value: rundir
      - equal:
          path: spec.template.spec.volumes[2].emptyDir.medium
          value: Memory
      - equal:
          path: spec.template.spec.volumes[2].emptyDir.sizeLimit
          value: 1Mi
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[4].name
          value: rundir
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[4].mountPath
          value: /run/mirrorbits
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[4].readOnly
          value: false
      - equal:
          path: spec.template.spec.containers[0].ports[0].name
          value: http
      - equal:
          path: spec.template.spec.containers[0].ports[0].containerPort
          value: 8080
      # There are no log volumes
      - notExists:
          path: spec.template.spec.volumes[5]
      - notExists:
          path: spec.template.spec.securityContext
      - notExists:
          path: spec.template.spec.containers[0].securityContext
      - notExists:
          path: spec.template.spec.containers[0].resources
      - notExists:
          path: spec.template.metadata.annotations
      - notExists:
          path: spec.template.spec.containers[0].ports[1]
      # Probes are define with default setups
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.httpGet.path
          value: /?mirrorstats
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.httpGet.port
          value: 8080
      - equal:
          path: spec.template.spec.containers[0].readinessProbe.httpGet.path
          value: /?mirrorstats
      - equal:
          path: spec.template.spec.containers[0].readinessProbe.httpGet.port
          value: 8080
  - it: should not define any persistent volume
    template: persistentVolumes.yaml
    asserts:
      - hasDocuments:
          count: 0
  - it: should not define any PV claim
    template: persistentVolumeClaims.yaml
    asserts:
      - hasDocuments:
          count: 0
  - it: should not generate any pdb with default values
    template: pdb.yaml
    asserts:
      - hasDocuments:
          count: 0
  - it: should create only 1 secret by default (mirrorbits configuration)
    template: secrets.yaml
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Secret
      - equal:
          path: metadata.name
          value: RELEASE-NAME-mirrorbits-config
      - matchRegex:
          path: data["mirrorbits.conf"]
          pattern: 'Repository: /srv/repo'
          decodeBase64: true
      - matchRegex:
          path: data["mirrorbits.conf"]
          pattern: 'Templates: /usr/share/mirrorbits/templates'
          decodeBase64: true
      - matchRegex:
          path: data["mirrorbits.conf"]
          pattern: 'GeoipDatabasePath: /usr/share/GeoIP'
          decodeBase64: true
      - matchRegex:
          path: data["mirrorbits.conf"]
          pattern: 'Gzip: false'
          decodeBase64: true
      - matchRegex:
          path: data["mirrorbits.conf"]
          pattern: 'ListenAddress: :8080'
          decodeBase64: true
      - matchRegex:
            path: data["mirrorbits.conf"]
            pattern: 'DisallowRedirects: true'
            decodeBase64: true
      - matchRegex:
            path: data["mirrorbits.conf"]
            pattern: 'DisableOnMissingFile: true'
            decodeBase64: true
      - matchRegex:
          path: data["mirrorbits.conf"]
          pattern: 'TraceFileLocation: /trace'
          decodeBase64: true
      - matchRegex:
          path: data["mirrorbits.conf"]
          pattern: 'RepositoryScanInterval: 5'
          decodeBase64: true
      - matchRegex:
          path: data["mirrorbits.conf"]
          pattern: 'ScanInterval: 30'
          decodeBase64: true
      - matchRegex:
          path: data["mirrorbits.conf"]
          pattern: 'LogDir: /var/log/mirrorbits'
          decodeBase64: true
      - matchRegex:
          path: data["mirrorbits.conf"]
          pattern: 'OutputMode: auto'
          decodeBase64: true
      - notMatchRegex:
          path: data["mirrorbits.conf"]
          pattern: 'Fallbacks'
          decodeBase64: true
      - notMatchRegex:
          path: data["mirrorbits.conf"]
          pattern: 'Redis'
          decodeBase64: true
      - notMatchRegex:
          path: data["mirrorbits.conf"]
          pattern: 'RPCListenAddress:'
          decodeBase64: true
      - notMatchRegex:
          path: data["mirrorbits.conf"]
          pattern: 'RPCPassword:'
          decodeBase64: true
  - it: should only create one service for HTTP with default settings
    template: services.yaml
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Service
      - equal:
          path: metadata.name
          value: RELEASE-NAME-mirrorbits
      - equal:
          path: spec.type
          value: ClusterIP
      - equal:
          path: spec.selector["app.kubernetes.io/instance"]
          value: RELEASE-NAME
      - equal:
          path: spec.selector["app.kubernetes.io/name"]
          value: mirrorbits
      - equal:
          path: spec.ports[0].name
          value: http
      - equal:
          path: spec.ports[0].port
          value: 80
      - equal:
          path: spec.ports[0].targetPort
          value: 8080
