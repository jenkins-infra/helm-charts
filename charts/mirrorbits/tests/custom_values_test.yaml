suite: Tests with custom values
templates:
  - deployment.yaml
  - ingresses.yaml
  - secrets.yaml
  - services.yaml
  - pdb.yaml
  - persistentVolumes.yaml
  - persistentVolumeClaims.yaml
values:
  - values/custom.yaml
tests:
  - it: Should set the correct service selector labels when a fullNameOverride is specified
    template: services.yaml
    set:
      fullNameOverride: "my-fullNameOverride"
    asserts:
      - hasDocuments:
          count: 2
      - documentIndex: 0
        isKind:
          of: Service
      - documentIndex: 0
        equal:
          path: spec.selector["app.kubernetes.io/name"]
          value: "mirrorbits"
      - documentIndex: 0
        equal:
          path: spec.selector["app.kubernetes.io/instance"]
          value: "RELEASE-NAME"
  - it: should define a customized "mirrorbits" deployment
    template: deployment.yaml
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Deployment
      - equal:
          path: spec.template.spec.containers[*].imagePullPolicy
          value: Always
      - equal:
          path: spec.replicas
          value: 2
      # Custom GeoIP PVC
      - equal:
          path: spec.template.spec.volumes[3].name
          value: geoipdata
      - equal:
          path: spec.template.spec.volumes[3].persistentVolumeClaim.claimName
          value: RELEASE-NAME-mirrorbits-geoipdata
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[1].name
          value: geoipdata
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[1].mountPath
          value: /geo-data
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[1].readOnly
          value: true
      # Log volumes is a custom PVC in a custom mount path
      - equal:
          path: spec.template.spec.volumes[1].name
          value: logs
      - equal:
          path: spec.template.spec.volumes[1].persistentVolumeClaim.claimName
          value: foobar
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[2].name
          value: logs
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[2].mountPath
          value: /custom
      # Data Volume
      - equal:
          path: spec.template.spec.volumes[2].name
          value: data
      - equal:
          path: spec.template.spec.volumes[2].persistentVolumeClaim.claimName
          value: mirrorbits-binary
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[3].name
          value: data
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[3].mountPath
          value: /DATA
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[3].subPath
          value: ./content/
      # Tempdir uses a tmpfs volume with a 100Mi limit
      - equal:
          path: spec.template.spec.volumes[4].name
          value: tmpdir
      - equal:
          path: spec.template.spec.volumes[4].emptyDir.medium
          value: Memory
      - equal:
          path: spec.template.spec.volumes[4].emptyDir.sizeLimit
          value: 100Mi
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[4].name
          value: tmpdir
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[4].mountPath
          value: /tmp
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[4].readOnly
          value: false
      - equal:
          path: spec.template.spec.securityContext.runAsUser
          value: 1000
      - equal:
          path: spec.template.spec.containers[0].securityContext.readOnlyRootFilesystem
          value: true
      - equal:
          path: spec.template.spec.containers[0].resources.limits.cpu
          value: 500m
      - equal:
          path: spec.template.metadata.annotations["ad.datadoghq.com/mirrorbits.logs"]
          value: |
            [
              {"type":"file","path":"/custom/downloads.log","source":"file","service":"RELEASE-NAME"},
              {"source":"container","service":"RELEASE-NAME"}
            ]
      - equal:
          path: spec.template.spec.containers[0].ports[0].name
          value: http
      - equal:
          path: spec.template.spec.containers[0].ports[0].containerPort
          value: 7777
      - equal:
          path: spec.template.spec.containers[0].ports[1].name
          value: cli
      - equal:
          path: spec.template.spec.containers[0].ports[1].containerPort
          value: 3333
      # Probes are define with custom setup
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.httpGet.path
          value: /?mirrorstats
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.httpGet.port
          value: 7777
      - equal:
          path: spec.template.spec.containers[0].readinessProbe.httpGet.path
          value: /?mirrorstats
      - equal:
          path: spec.template.spec.containers[0].readinessProbe.httpGet.port
          value: 7777
  - it: "should create two ingresses: one for HTTP and the other for CLI"
    template: ingresses.yaml
    asserts:
      - hasDocuments:
          count: 3
      ## Main Ingress
      - documentIndex: 0
        isKind:
          of: Ingress
      - documentIndex: 0
        equal:
          path: metadata.name
          value: RELEASE-NAME-mirrorbits
      - documentIndex: 0
        equal:
          path: spec.rules[0].http.paths[0].pathType
          value: "IfNotPresent"
      ## Additional Ingress
      - documentIndex: 1
        isKind:
          of: Ingress
      - documentIndex: 1
        equal:
          path: metadata.name
          value: RELEASE-NAME-mirrorbits-1
      - documentIndex: 1
        equal:
          path: metadata.annotations["nginx.ingress.kubernetes.io/rewrite-target"]
          value: "/$1$2/index.html"
      - documentIndex: 1
        equal:
          path: spec.ingressClassName
          value: bar
      - documentIndex: 1
        equal:
          path: spec.tls[0].secretName
          value: ubersecret
      - documentIndex: 1
        equal:
          path: spec.rules[0].host
          value: company.org
      - documentIndex: 1
        equal:
          path: spec.rules[0].http.paths[0].path
          value: /(.*)(/|$)
      - documentIndex: 1
        equal:
          path: spec.rules[0].http.paths[0].pathType
          value: ImplementationSpecific
      - documentIndex: 1
        equal:
          path: spec.rules[0].http.paths[0].backend.service.name
          value: RELEASE-NAME-mirrorbits
      - documentIndex: 1
        equal:
          path: spec.rules[0].http.paths[0].backend.service.port.number
          value: 443
      ## CLI Ingress
      - documentIndex: 2
        isKind:
          of: Ingress
      - documentIndex: 2
        equal:
          path: metadata.name
          value: RELEASE-NAME-mirrorbits-cli
      - documentIndex: 2
        equal:
          path: spec.ingressClassName
          value: customClass
      - documentIndex: 2
        equal:
          path: spec.tls[1].hosts[1]
          value: private.localhost
      - documentIndex: 2
        equal:
          path: spec.rules[0].host
          value: external.localhost
  - it: should define 2 customized PVCs, one for "mirrorbits" binary persistent volume and another for geoip
    template: persistentVolumes.yaml
    asserts:
      - hasDocuments:
          count: 2
      - documentIndex: 0
        isKind:
          of: PersistentVolume
      - documentIndex: 1
        isKind:
          of: PersistentVolume
  - it: should define a customized "mirrorbits" PV claim
    template: persistentVolumeClaims.yaml
    asserts:
      - hasDocuments:
          count: 2
      - documentIndex: 0
        isKind:
          of: PersistentVolumeClaim
      - documentIndex: 0
        equal:
          path: metadata.name
          value: mirrorbits-binary
      - documentIndex: 1
        isKind:
          of: PersistentVolumeClaim
      - documentIndex: 1
        equal:
          path: metadata.name
          value: RELEASE-NAME-mirrorbits-geoipdata
  - it: create a default pdb when replicated
    template: pdb.yaml
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: PodDisruptionBudget
      - equal:
          path: spec.minAvailable
          value: 1
      - equal:
          path: spec.selector.matchLabels['app.kubernetes.io/name']
          value: mirrorbits
  - it: create a customized pdb when custom values are set
    template: pdb.yaml
    set:
      poddisruptionbudget:
        minAvailable: 2
        maxUnavailable: 3
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: PodDisruptionBudget
      - equal:
          path: spec.minAvailable
          value: 2
      - equal:
          path: spec.maxUnavailable
          value: 3
      - equal:
          path: spec.selector.matchLabels['app.kubernetes.io/name']
          value: mirrorbits
  - it: should create all secrets
    template: secrets.yaml
    asserts:
      - hasDocuments:
          count: 2
      - documentIndex: 0
        isKind:
          of: Secret
      - documentIndex: 0
        equal:
          path: metadata.name
          value: RELEASE-NAME-mirrorbits-binary
      - documentIndex: 1
        isKind:
          of: Secret
      - documentIndex: 1
        equal:
          path: metadata.name
          value: RELEASE-NAME-mirrorbits-config
      - documentIndex: 1
        matchRegex:
          path: data["mirrorbits.conf"]
          pattern: 'Repository: /DATA'
          decodeBase64: true
      - documentIndex: 1
        matchRegex:
          path: data["mirrorbits.conf"]
          pattern: 'Templates: /custom-tpls'
          decodeBase64: true
      - documentIndex: 1
        matchRegex:
          path: data["mirrorbits.conf"]
          pattern: 'GeoipDatabasePath: /geo-data'
          decodeBase64: true
      - documentIndex: 1
        matchRegex:
          path: data["mirrorbits.conf"]
          pattern: 'Gzip: false'
          decodeBase64: true
      - documentIndex: 1
        matchRegex:
          path: data["mirrorbits.conf"]
          pattern: 'ListenAddress: :7777'
          decodeBase64: true
      - documentIndex: 1
        matchRegex:
          path: data["mirrorbits.conf"]
          pattern: 'LogDir: /custom'
          decodeBase64: true
      - documentIndex: 1
        matchRegex:
          path: data["mirrorbits.conf"]
          pattern: 'RedisAddress: redis-master.internal.company.org:6379'
          decodeBase64: true
      - documentIndex: 1
        matchRegex:
          path: data["mirrorbits.conf"]
          pattern: 'RedisPassword: SuperSecretRedisPassword'
          decodeBase64: true
      - documentIndex: 1
        matchRegex:
          path: data["mirrorbits.conf"]
          pattern: 'RedisDB: 4'
          decodeBase64: true
      - documentIndex: 1
        matchRegex:
          path: data["mirrorbits.conf"]
          pattern: 'RedisSentinelMasterName: mySentinelMaster'
          decodeBase64: true
      - documentIndex: 1
        matchRegex:
          path: data["mirrorbits.conf"]
          pattern: 'RedisSentinels:'
          decodeBase64: true
      - documentIndex: 1
        matchRegex:
          path: data["mirrorbits.conf"]
          pattern: '- Host: 4.3.2.1:26379'
          decodeBase64: true
      - documentIndex: 1
        matchRegex:
          path: data["mirrorbits.conf"]
          pattern: 'Fallbacks:'
          decodeBase64: true
      - documentIndex: 1
        matchRegex:
          path: data["mirrorbits.conf"]
          pattern: '- URL: https://fallback.company.org'
          decodeBase64: true
      - documentIndex: 1
        matchRegex:
          path: data["mirrorbits.conf"]
          pattern: 'CountryCode: DE'
          decodeBase64: true
      - documentIndex: 1
        matchRegex:
          path: data["mirrorbits.conf"]
          pattern: 'ContinentCode: EU'
          decodeBase64: true
      - documentIndex: 1
        matchRegex:
          path: data["mirrorbits.conf"]
          pattern: 'DisallowRedirects: false'
          decodeBase64: true
      - documentIndex: 1
        matchRegex:
          path: data["mirrorbits.conf"]
          pattern: 'DisableOnMissingFile: false'
          decodeBase64: true
      - documentIndex: 1
        matchRegex:
          path: data["mirrorbits.conf"]
          pattern: 'TraceFileLocation: /TIME'
          decodeBase64: true
      - documentIndex: 1
        matchRegex:
          path: data["mirrorbits.conf"]
          pattern: 'RepositoryScanInterval: 10'
          decodeBase64: true
      - documentIndex: 1
        matchRegex:
          path: data["mirrorbits.conf"]
          pattern: 'ScanInterval: 8'
          decodeBase64: true
      - documentIndex: 1
        matchRegex:
          path: data["mirrorbits.conf"]
          pattern: 'RPCListenAddress: 0.0.0.0:3333'
          decodeBase64: true
      - documentIndex: 1
        matchRegex:
          path: data["mirrorbits.conf"]
          pattern: 'RPCPassword: "SuperSecretPasswordForCli"'
          decodeBase64: true
      - documentIndex: 1
        matchRegex:
          path: data["mirrorbits.conf"]
          pattern: 'OutputMode: redirect'
          decodeBase64: true
      - documentIndex: 1
        matchRegex:
          path: data["mirrorbits.conf"]
          pattern: 'LocalJSPath: /some/path/to/js'
          decodeBase64: true
      - documentIndex: 1
        matchRegex:
          path: data["mirrorbits.conf"]
          pattern: 'AllowHTTPToHTTPSRedirects: true'
          decodeBase64: true
      - documentIndex: 1
        matchRegex:
          path: data["mirrorbits.conf"]
          pattern: 'SameDownloadInterval: 600'
          decodeBase64: true
      - documentIndex: 1
        matchRegex:
          path: data["mirrorbits.conf"]
          pattern: 'WeightDistributionRange: 1.5'
          decodeBase64: true
      - documentIndex: 1
        matchRegex:
          path: data["mirrorbits.conf"]
          pattern: "MaxLinkHeaders: 10"
          decodeBase64: true
      - documentIndex: 1
        matchRegex:
          path: data["mirrorbits.conf"]
          pattern: "FixTimezoneOffsets: true"
          decodeBase64: true
      - documentIndex: 1
        matchRegex:
          path: data["mirrorbits.conf"]
          pattern: "AllowOutdatedFiles:"
          decodeBase64: true
      - documentIndex: 1
        matchRegex:
          path: data["mirrorbits.conf"]
          pattern: "- Prefix: /dists/"
          decodeBase64: true
      - documentIndex: 1
        matchRegex:
          path: data["mirrorbits.conf"]
          pattern: "Minutes: 540"
          decodeBase64: true
  - it: "should create two (custom) services: HTTP and cli"
    template: services.yaml
    asserts:
      - hasDocuments:
          count: 2
      - documentIndex: 0
        isKind:
          of: Service
      - documentIndex: 0
        equal:
          path: metadata.name
          value: RELEASE-NAME-mirrorbits
      - documentIndex: 0
        equal:
          path: metadata.name
          value: RELEASE-NAME-mirrorbits
      - documentIndex: 0
        equal:
          path: spec.type
          value: LoadBalancer
      - documentIndex: 0
        equal:
          path: spec.selector["app.kubernetes.io/instance"]
          value: RELEASE-NAME
      - documentIndex: 0
        equal:
          path: spec.selector["app.kubernetes.io/name"]
          value: mirrorbits
      - documentIndex: 0
        equal:
          path: spec.ports[0].name
          value: http
      - documentIndex: 0
        equal:
          path: spec.ports[0].port
          value: 443
      - documentIndex: 0
        equal:
          path: spec.ports[0].targetPort
          value: 7777
      - documentIndex: 1
        isKind:
          of: Service
      - documentIndex: 1
        equal:
          path: metadata.name
          value: RELEASE-NAME-mirrorbits-cli
      - documentIndex: 1
        equal:
          path: spec.type
          value: NodePort
      - documentIndex: 1
        equal:
          path: spec.ports[0].name
          value: cli
      - documentIndex: 1
        equal:
          path: spec.selector["app.kubernetes.io/instance"]
          value: RELEASE-NAME
      - documentIndex: 1
        equal:
          path: spec.selector["app.kubernetes.io/name"]
          value: mirrorbits
      - documentIndex: 1
        equal:
          path: spec.ports[0].port
          value: 3333
      - documentIndex: 1
        equal:
          path: spec.ports[0].targetPort
          value: 3333
  - it: should only define a GeoIP PV when reusing existing PVCs
    template: persistentVolumes.yaml
    values:
      - values/custom_existingPVC.yaml
    asserts:
      - hasDocuments:
          count: 0
  - it: should only define a GeoIP PVC when reusing existing PVC for repository
    template: persistentVolumeClaims.yaml
    values:
      - values/custom_existingPVC.yaml
    asserts:
      - hasDocuments:
          count: 0
  - it: should set up repository to use the specified existing PVC (when specified)
    template: deployment.yaml
    values:
      - values/custom_existingPVC.yaml
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Deployment
      # Custom GeoIP PVC
      - equal:
          path: spec.template.spec.volumes[3].name
          value: geoipdata
      - equal:
          path: spec.template.spec.volumes[3].persistentVolumeClaim.claimName
          value: geodataHere
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[1].name
          value: geoipdata
      # Log volumes is a custom PVC in a custom mount path
      - equal:
          path: spec.template.spec.volumes[1].name
          value: logs
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[2].name
          value: logs
      # Data Volume
      - equal:
          path: spec.template.spec.volumes[2].name
          value: data
      - equal:
          path: spec.template.spec.volumes[2].persistentVolumeClaim.claimName
          value: anotherPVC
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[3].name
          value: data
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[3].mountPath
          value: /DATA
      # Tempdir uses a tmpfs volume with a 100Mi limit
      - equal:
          path: spec.template.spec.volumes[4].name
          value: tmpdir
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[4].name
          value: tmpdir
